# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'uzaysal.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import cv2 as cv
from tkinter import *
from PIL import Image
import numpy as np
from matplotlib import pyplot as plt
from skimage.color import rgb2gray
from skimage.transform import swirl,rescale

class Ui_Dialog(object):

    path = None #Bu değişken resmin yolunu saklar.
    img = None #Üzerinde işlem yapılan image ları saklar.

    def __init__(self,path) -> None:
        super().__init__()
        self.path = path
        

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(464, 338)
        self.resize_btn = QtWidgets.QPushButton(Dialog)
        self.resize_btn.setGeometry(QtCore.QRect(60, 40, 161, 41))
        self.resize_btn.setObjectName("resize_btn")
        self.resize_btn.clicked.connect(self.resize_btn_clicked)

        self.rotate_btn = QtWidgets.QPushButton(Dialog)
        self.rotate_btn.setGeometry(QtCore.QRect(60, 100, 161, 41))
        self.rotate_btn.setObjectName("rotate_btn")
        self.rotate_btn.clicked.connect(self.rotate_btn_clicked)

        self.swirl_btn = QtWidgets.QPushButton(Dialog)
        self.swirl_btn.setGeometry(QtCore.QRect(240, 40, 161, 41))
        self.swirl_btn.setObjectName("swirl_btn")
        self.swirl_btn.clicked.connect(self.swirl_btn_clicked)

        self.cropping_btn = QtWidgets.QPushButton(Dialog)
        self.cropping_btn.setGeometry(QtCore.QRect(240, 100, 161, 41))
        self.cropping_btn.setObjectName("cropping_btn")
        self.cropping_btn.clicked.connect(self.crop_btn_clicked)

        self.kaydet_btn = QtWidgets.QPushButton(Dialog)
        self.kaydet_btn.setGeometry(QtCore.QRect(130, 220, 201, 61))
        self.kaydet_btn.setObjectName("kaydet_btn")
        self.kaydet_btn.clicked.connect(self.kaydet_btn_clicked)

        self.rescale_btn = QtWidgets.QPushButton(Dialog)
        self.rescale_btn.setGeometry(QtCore.QRect(150, 150, 161, 41))
        self.rescale_btn.setObjectName("rescale_btn")
        self.rescale_btn.clicked.connect(self.rescale_btn_clicked)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Uzaysal İşlemler"))
        self.resize_btn.setText(_translate("Dialog", "Resize"))
        self.rotate_btn.setText(_translate("Dialog", "Rotate"))
        self.swirl_btn.setText(_translate("Dialog", "Swirl"))
        self.cropping_btn.setText(_translate("Dialog", "Cropping"))
        self.kaydet_btn.setText(_translate("Dialog", "KAYDET"))
        self.rescale_btn.setText(_translate("Dialog", "Rescale"))


    #resize işlevselliğini sağlayan fonksiyon.
    def resize_btn_clicked(self):
        #resmi cv.imread fonksiyonu ile bulunduğu dizin yolunu parametre olarak vererek self.img değişkenine
        #atıyoruz.
        self.img = cv.imread(self.path)
        #cv.resize fonksiyonu ile resmi yeniden boyutlandırıyoruz.
        self.img = cv.resize(self.img,(1000,900))
        #resmi cv.imshow fonksiyonu ile gösteriyoruz.
        cv.imshow("Resize",self.img)
        cv.waitKey(0)
        cv.destroyAllWindows()

    #rotate işlevselliğini sağlayan fonksiyon.
    def rotate_btn_clicked(self):
        #resmi cv.imread fonksiyonu ile bulunduğu dizin yolunu parametre olarak vererek self.img değişkenine
        #atıyoruz.
        self.img = cv.imread(self.path)
        #cv.rotate fonksiyonu ile resmi saat yönünde 90 derece döndürüyoruz.
        self.img = cv.rotate(self.img,cv.ROTATE_90_CLOCKWISE)
        cv.imshow("Rotate",self.img)
        cv.waitKey(0)
        cv.destroyAllWindows()
    
    #cropping işlevselliğini sağlayan fonksiyon
    def crop_btn_clicked(self):
        #resmi cv.imread fonksiyonu ile bulunduğu dizin yolunu parametre olarak vererek self.img değişkenine
        #atıyoruz.
        self.img = cv.imread(self.path)
        
        #resim dizisi içindeki genişlik ve uzunluk değerlerini belirli bir sayı değerine alarak
        #resmi kırpıyoruz.
        self.img = self.img[0:420,0:420]
        cv.imshow("Cropping",self.img)
        cv.waitKey(0)
        cv.destroyAllWindows()
    
    #swirl işlevselliğini sağlayan fonksiyon.
    def swirl_btn_clicked(self):
        #resmi cv.imread fonksiyonu ile bulunduğu dizin yolunu parametre olarak vererek self.img değişkenine
        #atıyoruz.
        self.img = cv.imread(self.path)
        #resmin boyutlarını ve kanal sayısını alıyoruz.
        h,w,c = self.img.shape
        #swirl işlemi uygulanacak bölgenin koordinatlarını buluyoruz.
        half_height = int((h / 2))
        half_width = int((w / 2))
        
        #swirl işlemi uygulanacak bölgenin koordinatlarını, resmin kendisini, ve swirl işleminin gücünü
        #parametre olarak veriyoruz.
        self.img = swirl(self.img,center=(half_height,half_width),strength=500.0)
        cv.imshow("Swirl",self.img)
        cv.waitKey(0)
        cv.destroyAllWindows()
    
    #rescale işlevselliğini sağlayan fonksiyon.
    def rescale_btn_clicked(self):
        #Resmi okuyoruz.
        self.img = cv.imread(self.path)
        #rescale fonksiyonu ile resmi 5 kat küçültüyoruz. verdiğimiz 0.2 değeri sayesinde
        self.img = rescale(self.img,0.2,multichannel=True)
        cv.imshow("Rescale",self.img)
        cv.waitKey(0)
        cv.destroyAllWindows()
    
    def kaydet_btn_clicked(self):
        
        file_tuple = QFileDialog.getSaveFileName()
        name = str(file_tuple[0]).replace("/","\\")
        image = cv.convertScaleAbs(self.img, alpha=(255.0))
        cv.imwrite(name, image) 

    #def warp_btn_clicked(self):

    

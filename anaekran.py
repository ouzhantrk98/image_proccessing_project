# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tuto.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QDialog, QMainWindow, QFileDialog,QMessageBox
from goruntuiyilestirmedialog import Ui_Filtreler as GoruntuIyilestirme
import matplotlib.pyplot as plt
import skimage
from skimage.util import img_as_ubyte
from skimage.exposure import histogram
from tkinter import *
from PIL import Image
import numpy as np
import sys
import cv2 as cv
from uzaysalDialog import Ui_Dialog as Uzaysal
from morfolojikDialog import Ui_Dialog as Morfolojik
from yogunlukDialog import Ui_Dialog as Yogunluk

class Ui_MainWindow(object):
    resim = None #Buraya kullanıcın seçtiği resim girilecek.
    orjinalResim = None #Resim çözünürlüğünün etkilenmemesi için...
    path = None #This variable stores directory of image
    secilen_resim = None #Kaydetmek için kullanıcının seçtiği resim.

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(975, 749)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.goruntuIyilestir = QtWidgets.QPushButton(self.centralwidget)
        self.goruntuIyilestir.setGeometry(QtCore.QRect(30, 90, 221, 61))
        self.goruntuIyilestir.setObjectName("goruntuIyilestir")
        self.goruntuIyilestir.clicked.connect(self.tikladi)

        self.histogram = QtWidgets.QPushButton(self.centralwidget)
        self.histogram.setGeometry(QtCore.QRect(30, 180, 221, 61))
        self.histogram.setObjectName("histogram")
        self.histogram.clicked.connect(self.histogram_clicked)

        self.uzaysal = QtWidgets.QPushButton(self.centralwidget)
        self.uzaysal.setGeometry(QtCore.QRect(30, 340, 221, 61))
        self.uzaysal.setObjectName("uzaysal")
        self.uzaysal.clicked.connect(self.uzaysal_clicked)

        self.yogunluk = QtWidgets.QPushButton(self.centralwidget)
        self.yogunluk.setGeometry(QtCore.QRect(30, 420, 221, 61))
        self.yogunluk.setObjectName("yogunluk")
        self.yogunluk.clicked.connect(self.yogunluk_clicked)
        
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(400, 110, 451, 361))
        self.label.setStyleSheet("background-color: white;")
        self.label.setObjectName("label")
        

        self.esitleme = QtWidgets.QPushButton(self.centralwidget)
        self.esitleme.setGeometry(QtCore.QRect(30, 260, 221, 61))
        self.esitleme.setObjectName("histogram_2")
        self.esitleme.clicked.connect(self.esitleme_clicked)

        self.morfolojik = QtWidgets.QPushButton(self.centralwidget)
        self.morfolojik.setGeometry(QtCore.QRect(30, 500, 221, 61))
        self.morfolojik.setObjectName("morfolojik")
        self.morfolojik.clicked.connect(self.morfolojik_clicked)

        MainWindow.setCentralWidget(self.centralwidget)

        self.video_isleme = QtWidgets.QPushButton(self.centralwidget)
        self.video_isleme.setGeometry(QtCore.QRect(30, 570, 221, 61))
        self.video_isleme.setObjectName("video_isleme")
        self.video_isleme.clicked.connect(self.video_isleme_clicked)
        
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 975, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        
        MainWindow.setMenuBar(self.menubar)
        
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        
        MainWindow.setStatusBar(self.statusbar)
        
        self.actionOpen_File = QtWidgets.QAction(MainWindow)
        self.actionOpen_File.setObjectName("actionOpen_File")
        
        self.actionSave_File = QtWidgets.QAction(MainWindow)
        self.actionSave_File.setObjectName("actionSave_File")
        
        self.actionDosya_Ac = QtWidgets.QAction(MainWindow)
        self.actionDosya_Ac.setObjectName("actionDosya_Ac")
        self.actionDosya_Ac.triggered.connect(self.dosyaAc)

        self.menuFile.addAction(self.actionDosya_Ac)
        self.menubar.addAction(self.menuFile.menuAction())

        self.actionDosya_Kaydet = QtWidgets.QAction(MainWindow)
        self.actionDosya_Kaydet.setObjectName("actionDosya_Kaydet")
        self.actionDosya_Kaydet.triggered.connect(self.dosya_kaydet)

        self.menuFile.addAction(self.actionDosya_Ac)
        self.menuFile.addAction(self.actionDosya_Kaydet)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Ana Ekran"))
        self.goruntuIyilestir.setText(_translate("MainWindow", "Goruntu İyilestirme Işlemleri"))
        self.histogram.setText(_translate("MainWindow", "Histogram Görüntüleme"))
        self.uzaysal.setText(_translate("MainWindow", "Uzaysal Dönüşüm İşlemleri"))
        self.yogunluk.setText(_translate("MainWindow", "Yoğunluk Dönüşüm İşlemleri"))
        self.esitleme.setText(_translate("MainWindow", "Histogram Eşitleme"))
        self.morfolojik.setText(_translate("MainWindow", "Morfolojik İşlemler"))
        self.menuFile.setTitle(_translate("MainWindow", "Dosya"))
        self.actionOpen_File.setText(_translate("MainWindow", "Open File"))
        self.actionSave_File.setText(_translate("MainWindow", "Save File"))
        self.actionDosya_Ac.setText(_translate("MainWindow", "Dosya Aç"))
        self.actionDosya_Kaydet.setText(_translate("MainWindow", "Dosya Kaydet"))
        self.video_isleme.setText(_translate("MainWindow", "Video Kenar Belirleme"))

    def tikladi(self):
        if(self.resim == None):
            self.hataMesaji()
        else:
            dialog = QtWidgets.QDialog()
            dialog.ui = GoruntuIyilestirme(self.orjinalResim) #Bu sınıfı Form ismi ile import ettiğimiz için bu şekilde değişiklik yapıyoruz.
            dialog.ui.setupUi(dialog)
            dialog.exec_()
            dialog.show()


    def dosyaAc(self):
        
        filename = QFileDialog.getOpenFileName()
        self.path = filename[0] #We initialized path variable with directory of image

        self.orjinalResim = QtGui.QPixmap(filename[0])
        self.resim = QtGui.QPixmap(filename[0]).scaled(self.label.size(), QtCore.Qt.KeepAspectRatio)
        self.label.setPixmap(self.resim)
    
    #Bu mesaj eğer kullanıcı resim seçmeden 
    #herhangi bir işlem yapmaya çalışırsa hata olarak
    #gösterilecek.
    def hataMesaji(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Lütfen bir resim seçiniz.")
        msg.setWindowTitle("Hata")
        msg.exec_()
     
    
    #Bu kod histogram işlemleri için yazıldı.
    def histogram_clicked(self):
        #Eğer kullanıcı resim seçmeden bu butona tıklarsa uyarı mesajı gösterilir.
        if(self.resim == None):

            self.hataMesaji()
        else:
            #kullanıcının seçtiği resmi PIL kütüphanesindeki Image fonksiyonu ile açarak
            #img_as_ubyte fonksiyonu ile uygun formata çeviriyoruz.
            noisy_image = img_as_ubyte(np.array(Image.open(self.path)))
            #histogram fonksiyonu ile resmin histogramını hesaplıyoruz.
            hist, hist_centers = histogram(noisy_image)
            #histogram grafiği oluşturuluyor.
            fig, ax = plt.subplots(ncols=2, figsize=(10, 5))
            #resmin gösterilmesi için gerekli olan kodlar.
            ax[0].imshow(noisy_image, cmap=plt.cm.gray)
            ax[0].axis('off')
            #histogram grafiği çiziliyor.
            ax[1].plot(hist_centers, hist, lw=2)
            ax[1].set_title('Gray-level histogram')

            plt.show()  

    #Histogram eşitleme işlevini gerçekleştiren kod.
    def esitleme_clicked(self):
        #Kullanıcı resim seçmemişse uyarı mesajı gösterilir.
        if(self.resim == None):
            self.hataMesaji()
        else:
            #Kullanıcının seçtiği resmi ndarray olarak açıyoruz ve histogram eşitleme
            #  işlemini gerçekleştiriyoruz.
            im = skimage.exposure.equalize_hist(np.array(Image.open(self.path)))
            self.secilen_resim = im #Kullanıcının resmi kaydedebilmesi için oluşan img değişkenini
            # sınıf değişkenine atıyoruz.
            cv.imshow("Histogram Esitleme", im)

    def dosya_kaydet(self):
        
        if(self.resim == None or self.secilen_resim.size == 0):
            self.hataMesaji()
        else:
            file_tuple = QFileDialog.getSaveFileName()
            name = str(file_tuple[0]).replace("/","\\")
            self.secilen_resim = cv.convertScaleAbs(self.secilen_resim, alpha=(255.0))
            cv.imwrite(name, self.secilen_resim) 

    def uzaysal_clicked(self):
        
        if(self.resim == None):
            self.hataMesaji()
        else:
            dialog = QtWidgets.QDialog()
            dialog.ui = Uzaysal(self.path) #Bu sınıfı Form ismi ile import ettiğimiz için bu şekilde değişiklik yapıyoruz.
            dialog.ui.setupUi(dialog)
            dialog.exec_()
            dialog.show()


    def morfolojik_clicked(self):
        
        if(self.resim == None):
            self.hataMesaji()
        else:
            dialog = QtWidgets.QDialog()
            dialog.ui = Morfolojik(self.path)
            dialog.ui.setupUi(dialog)
            dialog.exec_()
            dialog.show()

    def yogunluk_clicked(self):
            
        if(self.resim == None):
            self.hataMesaji()
        else:
            dialog = QtWidgets.QDialog()
            dialog.ui = Yogunluk(self.path)
            dialog.ui.setupUi(dialog)
            dialog.exec_()
            dialog.show()
    
    def video_isleme_clicked(self):
        #Kullanıcının birincil kamerasını açar. 
        cap = cv.VideoCapture(0)
        #Klavyede Enter tuşuna basmadan açılan ekran kapanmaz. 
        while True:
            ret, img = cap.read() #Canlı video görüntüsünü img değişkenine atıyoruz.
            #daha iyi analiz yapabilmek için resmi gri tonlamalı haline çeviriyoruz.
            gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY) 
            #Kenar tespiti için resmi gri tonlamalı halinden bulanık haline çevriyoru
            blur = cv.GaussianBlur(gray, (5, 5), 0)
            #Canny fonksiyonu eşik değerleri alarak blur değişkeni üzerinde kenar belirleme işlemi yapıyor.
            canny = cv.Canny(blur, 10, 70)
            #siyah beyaz olarak görüntüyü çıkarıyoruz.
            ret, mask = cv.threshold(canny, 70, 255, cv.THRESH_BINARY)

            cv.imshow('Video feed', mask) #Görüntüyü gösteriyoruz.
    
            if cv.waitKey(1) == 13:
                break
    
        cap.release()
        cv.destroyAllWindows()

app = QApplication(sys.argv) #Bu kod sistem için basit bir yapılandırma sağlıyor
win = QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(win)
win.show()
sys.exit(app.exec_()) #Bu kod ise çarpıya basıldığında çıkış yapmayı sağlıyor

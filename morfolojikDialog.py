# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'morfolojik.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import cv2 as cv
from numpy.lib.type_check import typename
from skimage.morphology import area_opening,area_closing,binary_dilation,binary_erosion,black_tophat,closing,convex_hull_object,remove_small_holes,dilation,thin
import numpy as np
from tkinter import *
from PIL import Image



class Ui_Dialog(object):

    path = None #Bu değişken resmin yolunu saklar.
    img = None #image değerini kendi içinde saklayan değişken

    def __init__(self,yol) -> None:
        super().__init__()
        self.path = yol

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(901, 276)

        self.area_closing_btn = QtWidgets.QPushButton(Dialog)
        self.area_closing_btn.setGeometry(QtCore.QRect(40, 20, 151, 51))
        self.area_closing_btn.setObjectName("area_closing_btn")
        self.area_closing_btn.clicked.connect(self.area_closing_btn_clicked)

        self.area_opening_btn = QtWidgets.QPushButton(Dialog)
        self.area_opening_btn.setGeometry(QtCore.QRect(40, 90, 151, 51))
        self.area_opening_btn.setObjectName("area_opening_btn")
        self.area_opening_btn.clicked.connect(self.area_opening_btn_clicked)

        self.binary_dilation_btn = QtWidgets.QPushButton(Dialog)
        self.binary_dilation_btn.setGeometry(QtCore.QRect(210, 20, 151, 51))
        self.binary_dilation_btn.setObjectName("binary_dilation_btn")
        self.binary_dilation_btn.clicked.connect(self.binary_dilation_btn_clicked)

        self.binary_erosion = QtWidgets.QPushButton(Dialog)
        self.binary_erosion.setGeometry(QtCore.QRect(210, 90, 151, 51))
        self.binary_erosion.setObjectName("binary_erosion")
        self.binary_erosion.clicked.connect(self.binary_erosion_btn_clicked)

        self.closing_btn = QtWidgets.QPushButton(Dialog)
        self.closing_btn.setGeometry(QtCore.QRect(380, 90, 151, 51))
        self.closing_btn.setObjectName("closing_btn")
        self.closing_btn.clicked.connect(self.closing_btn_clicked)

        self.black_tophat_btn = QtWidgets.QPushButton(Dialog)
        self.black_tophat_btn.setGeometry(QtCore.QRect(380, 20, 151, 51))
        self.black_tophat_btn.setObjectName("black_tophat_btn")
        self.black_tophat_btn.clicked.connect(self.black_tophat_btn_clicked)

        self.thin_btn = QtWidgets.QPushButton(Dialog)
        self.thin_btn.setGeometry(QtCore.QRect(550, 90, 151, 51))
        self.thin_btn.setObjectName("thin_btn")
        self.thin_btn.clicked.connect(self.thin_btn_clicked)

        self.convex_hull_obj_btn = QtWidgets.QPushButton(Dialog)
        self.convex_hull_obj_btn.setGeometry(QtCore.QRect(550, 20, 151, 51))
        self.convex_hull_obj_btn.setObjectName("convex_hull_obj_btn")
        self.convex_hull_obj_btn.clicked.connect(self.convex_hull_obj_btn_clicked)

        self.dilation_btn = QtWidgets.QPushButton(Dialog)
        self.dilation_btn.setGeometry(QtCore.QRect(720, 90, 151, 51))
        self.dilation_btn.setObjectName("dilation_btn")
        self.dilation_btn.clicked.connect(self.dilation_btn_clicked)


        self.remove_small_holes_btn = QtWidgets.QPushButton(Dialog)
        self.remove_small_holes_btn.setGeometry(QtCore.QRect(720, 20, 151, 51))
        self.remove_small_holes_btn.setObjectName("thin_btn_clicked")
        self.remove_small_holes_btn.clicked.connect(self.remove_small_holes_btn_clicked)

        self.kaydet_btn = QtWidgets.QPushButton(Dialog)
        self.kaydet_btn.setGeometry(QtCore.QRect(340, 190, 221, 61))
        self.kaydet_btn.setObjectName("kaydet_btn")
        self.kaydet_btn.clicked.connect(self.kaydet_btn_clicked)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Morfolojik İşlemler"))
        self.area_closing_btn.setText(_translate("Dialog", "Area Closing"))
        self.area_opening_btn.setText(_translate("Dialog", "Area Opening"))
        self.binary_dilation_btn.setText(_translate("Dialog", "Binary Dilation"))
        self.binary_erosion.setText(_translate("Dialog", "Binary Erosion"))
        self.closing_btn.setText(_translate("Dialog", "Closing"))
        self.black_tophat_btn.setText(_translate("Dialog", "Black Tophat"))
        self.thin_btn.setText(_translate("Dialog", "Thin"))
        self.convex_hull_obj_btn.setText(_translate("Dialog", "Convex Hull Object"))
        self.dilation_btn.setText(_translate("Dialog", "Dilation"))
        self.remove_small_holes_btn.setText(_translate("Dialog", "Remove Small Holes"))
        self.kaydet_btn.setText(_translate("Dialog", "KAYDET"))

    #Area closing işlevselliğini sağlayan fonksiyon
    def area_closing_btn_clicked(self):

        #resmi okuyoruz.
        self.img = cv.imread(self.path)
        #resmi 2 boyutlu diziye çevirip tüm elemanları int olarak veriyoruz. Boyut parametresini 200 olarak belirledik.
        # verdik. Default değer 64, connectivity değeri 1 olarak belirledik. 
        self.img = area_closing(self.img[:,:,0].astype(int), 200, connectivity=1)
        #cv.imshow fonksiyonu ile resmi göstermek için dizi değerlerini unsigned integer' a çevirdik.
        cv.imshow("Area Closing", self.img.astype(np.uint8))
        cv.waitKey(0)
        cv.destroyAllWindows()
        
    #Area opening işlevselliğini sağlayan fonksiyon
    def area_opening_btn_clicked(self):

        #resmi okuyoruz.
        self.img = cv.imread(self.path)
        #resmi 2 boyutlu diziye çevirip tüm elemanları int olarak veriyoruz. Boyut parametresini 200 olarak belirledik.
        # verdik. Default değer 64, connectivity değeri 1 olarak belirledik. 
        self.img = area_opening(self.img[:,:,0].astype(int), 200, connectivity=1)
        #cv.imshow fonksiyonu ile resmi göstermek için dizi değerlerini unsigned integer' a çevirdik.
        cv.imshow("Area Opening", self.img.astype(np.uint8))
        cv.waitKey(0)
        cv.destroyAllWindows()

    #binary dilation işlevselliğini sağlayan fonksiyon
    def binary_dilation_btn_clicked(self):

        #resmi okuyup cv.cvtColor fonksiyonu ile siyah beyaz formata çeviriyoruz.
        self.img = cv.cvtColor(cv.imread(self.path), cv.COLOR_BGR2GRAY)
        
        #resmi binary formata yani 0 ve 1 değerlerine çeviriyoruz. Eşik değeri 127 
        #yani piksel_degeri > 127 ise 1, değilse 0 oluyor.
        (thresh, blackAndWhiteImage) = cv.threshold(self.img, 127, 255, cv.THRESH_BINARY)
        #binary dilation fonksiyonu resmi bool değerlere sahip diziye çeviriyoruz.
        binary_bool_img = binary_dilation(blackAndWhiteImage)

        #resmi yine 0 ve 1 değerlerine dönüştürüp image formatına çeviriyoruz.
        self.img = Image.fromarray(binary_bool_img * 255)
        self.img.show() #yeni resmi kullanıcıya gösteriyoruz.
        
    #binary erosion işlevselliğini sağlayan fonksiyon
    def binary_erosion_btn_clicked(self):
        #resmi okuyup cv.cvtColor fonksiyonu ile siyah beyaz formata çeviriyoruz.
        self.img = cv.cvtColor(cv.imread(self.path), cv.COLOR_BGR2GRAY)
        #resmi binary formata yani 0 ve 1 değerlerine çeviriyoruz. Eşik değeri 127 
        #yani piksel_degeri > 127 ise 1, değilse 0 oluyor.
        (thresh, blackAndWhiteImage) = cv.threshold(self.img, 127, 255, cv.THRESH_BINARY)
        binary_bool_img = binary_erosion(blackAndWhiteImage)
        #resmi yine 0 ve 1 değerlerine dönüştürüp image formatına çeviriyoruz.
        self.img = Image.fromarray(binary_bool_img * 255)
        self.img.show() #yeni resmi kullanıcıya gösteriyoruz.

    #closing işlevselliğini sağlayan fonksiyon
    def closing_btn_clicked(self):
        #resmi okuyup cv.cvtColor fonksiyonu ile siyah beyaz formata çeviriyoruz.
        self.img = cv.cvtColor(cv.imread(self.path), cv.COLOR_BGR2GRAY)
         #resmi binary formata yani 0 ve 1 değerlerine çeviriyoruz. Eşik değeri 127 
        #yani piksel_degeri > 127 ise 1, değilse 0 oluyor.
        (thresh, blackAndWhiteImage) = cv.threshold(self.img, 127, 255, cv.THRESH_BINARY)
        binary_img = closing(blackAndWhiteImage)
        
        #cv.imshow fonksiyonu ile yeni resmi kullanıcıya gösteriyoruz.
        cv.imshow("Closing",binary_img)
        cv.waitKey(0)
        cv.destroyAllWindows()

    #black tophat işlevselliğini sağlayan fonksiyon
    def black_tophat_btn_clicked(self):
        #resmi okuyoruz. 
        self.img = cv.cvtColor(cv.imread(self.path), cv.COLOR_BGR2GRAY)
        #black tophat fonksiyonuna resmi veriyoruz.
        self.img = black_tophat(self.img)

        #yeni resmi opencv kütüphanesi ile gösteriyoruz.
        cv.imshow("Black Tophat",self.img)
        cv.waitKey(0)
        cv.destroyAllWindows()

    #binary image alır...
    #Geriye binary bool resmi döndürür.
    def convex_hull_obj_btn_clicked(self):
        self.img = cv.cvtColor(cv.imread(self.path), cv.COLOR_BGR2GRAY)
        
        (thresh, blackAndWhiteImage) = cv.threshold(self.img, 127, 255, cv.THRESH_BINARY)
        binary_bool_img = convex_hull_object(blackAndWhiteImage)

        self.img = Image.fromarray(binary_bool_img * 255)
        self.img.show()

    #dilation işlevselliğini sağlayan fonksiyon
    def dilation_btn_clicked(self):
        self.img = cv.imread(self.path)
        self.img = dilation(self.img)
        cv.imshow("Dilation",self.img)
        cv.waitKey(0)
        cv.destroyAllWindows()

    #remove small holes işlevselliğini sağlayan fonksiyon
    def remove_small_holes_btn_clicked(self):
        #resmi siyah beyaz formata çeviriyoruz.
        self.img = cv.cvtColor(cv.imread(self.path), cv.COLOR_BGR2GRAY)

        #resmi binary formata çeviriyoruz
        (thresh, blackAndWhiteImage) = cv.threshold(self.img, 127, 255, cv.THRESH_BINARY)
        #binary formata çevrilen resmi remove_small_holes fonksiyonuna gönderiyoruzz. 
        binary_bool_img = remove_small_holes(blackAndWhiteImage)
        #resmi image formatına çeviriyoruz.
        self.img = Image.fromarray(binary_bool_img * 255)
        self.img.show() #resmi kullanıcıya gösteriyoruz.
    
    #thin işlevselliğini sağlayan fonksiyon
    def thin_btn_clicked(self):
        #resmi okuyup cv.cvtColor fonksiyonu ile siyah beyaz formata çeviriyoruz.
        self.img = cv.cvtColor(cv.imread(self.path), cv.COLOR_BGR2GRAY)
        #resmi binary formata yani 0 ve 1 değerlerine çeviriyoruz. Eşik değeri 127
        #yani piksel_degeri > 127 ise 1, değilse 0 oluyor.
        (thresh, blackAndWhiteImage) = cv.threshold(self.img, 127, 255, cv.THRESH_BINARY)
        #thin fonksiyonuna binary img dizisini atıyoruz.
        binary_bool_img = thin(blackAndWhiteImage)

        #binary bool resmi binary int tipine çevirip image formatına çeviriyoruz.
        self.img = Image.fromarray(binary_bool_img * 255)
        self.img.show()#resmi gösteriyoruz.

    def kaydet_btn_clicked(self):
        file_tuple = QFileDialog.getSaveFileName()
        name = str(file_tuple[0]).replace("/","\\")

        if(type(self.img) == np.ndarray):
            image = cv.convertScaleAbs(self.img, alpha=(255.0))
            cv.imwrite(name, image)
            print("Kaydedildi np array")
        else:
            try:
                image = cv.convertScaleAbs(np.array(self.img), alpha=(255.0))
                cv.imwrite(name, image)
                print("Kaydedildi Image")
            except AttributeError:
                print("Kaydetmek için resim üzerinde morfolojik işlem uygulayın.")
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog

from skimage.filters import gaussian,median,prewitt,sato,farid,hessian,scharr,sobel,laplace,roberts
from skimage.morphology import disk
from tkinter import *
from PIL import Image
import numpy as np
import cv2 as cv
from matplotlib import pyplot as plt

class Ui_Filtreler(object):

    gosterilecek_resim = None #qpixmap tipinde
    img_ndarray3d = None #This variable stores numpy array converted from qpixmap object
    last_filter = None #This variable will assign all the filters.

    def __init__(self,gelen_resim) -> None:
        super().__init__()
        self.gosterilecek_resim = gelen_resim
        
        self.pixmap_to_ndarray()
        #self.convert_3d_to_2d()
        
    def setupUi(self, Filtreler):
        Filtreler.setObjectName("Filtreler")
        Filtreler.resize(982, 742)
        self.gaussian = QtWidgets.QPushButton(Filtreler)
        self.gaussian.setGeometry(QtCore.QRect(170, 20, 131, 21))
        self.gaussian.setObjectName("gaussian")
        

        self.median = QtWidgets.QPushButton(Filtreler)
        self.median.setGeometry(QtCore.QRect(310, 20, 111, 20))
        self.median.setObjectName("median")
        self.sato = QtWidgets.QPushButton(Filtreler)
        self.sato.setGeometry(QtCore.QRect(310, 70, 121, 20))
        self.sato.setObjectName("sato")
        self.laplace = QtWidgets.QPushButton(Filtreler)
        self.laplace.setGeometry(QtCore.QRect(170, 70, 121, 21))
        self.laplace.setObjectName("laplace")
        self.scharr = QtWidgets.QPushButton(Filtreler)
        self.scharr.setGeometry(QtCore.QRect(560, 20, 111, 20))
        self.scharr.setObjectName("scharr")
        self.sobel = QtWidgets.QPushButton(Filtreler)
        self.sobel.setGeometry(QtCore.QRect(560, 70, 101, 20))
        self.sobel.setObjectName("sobel")
        self.robert = QtWidgets.QPushButton(Filtreler)
        self.robert.setGeometry(QtCore.QRect(440, 70, 111, 21))
        self.robert.setObjectName("robert")
        self.prewitt = QtWidgets.QPushButton(Filtreler)
        self.prewitt.setGeometry(QtCore.QRect(440, 20, 111, 21))
        self.prewitt.setObjectName("prewitt")
        self.farid = QtWidgets.QPushButton(Filtreler)
        self.farid.setGeometry(QtCore.QRect(690, 20, 101, 20))
        self.farid.setObjectName("farid")
        self.hessian = QtWidgets.QPushButton(Filtreler)
        self.hessian.setGeometry(QtCore.QRect(690, 70, 111, 20))
        self.hessian.setObjectName("hessian")

        self.resim = QtWidgets.QLabel(Filtreler)
        self.resim.setGeometry(QtCore.QRect(170, 150, 651, 501))
        self.resim.setText("")
        self.resim.setObjectName("resim")

        #Kaydet butonu, bu buton aracılığı ile resimleri kaydeder.
        self.kaydet = QtWidgets.QPushButton(Filtreler)
        self.kaydet.setGeometry(QtCore.QRect(430, 690, 141, 41))
        self.kaydet.setObjectName("kaydet")
        self.kaydet.clicked.connect(self.kaydet_butonu)

        #Resmi burada ayarlıyoruz
        self.resim.setPixmap(QtGui.QPixmap(self.gosterilecek_resim).scaled(self.resim.size(),QtCore.Qt.KeepAspectRatio))
        self.resim_alani = self.resim

        self.gaussian.clicked.connect(self.gaussian_filtresi)
        self.median.clicked.connect(self.median_filter)
        self.prewitt.clicked.connect(self.prewitt_filter)
        self.sato.clicked.connect(self.sato_filter)
        self.farid.clicked.connect(self.farid_filter)
        self.hessian.clicked.connect(self.hessian_filter)
        self.scharr.clicked.connect(self.scharr_filter)
        self.sobel.clicked.connect(self.sobel_filter)
        self.robert.clicked.connect(self.robert_filter)
        self.laplace.clicked.connect(self.laplace_filter)

        self.retranslateUi(Filtreler)
        QtCore.QMetaObject.connectSlotsByName(Filtreler)

    def retranslateUi(self, Filtreler):
        _translate = QtCore.QCoreApplication.translate
        Filtreler.setWindowTitle(_translate("Filtreler", "Filtreleme Seçenekleri"))
        self.gaussian.setText(_translate("Filtreler", "Gaussian Filtresi"))
        self.median.setText(_translate("Filtreler", "Median Filtresi"))
        self.sato.setText(_translate("Filtreler", "Sato Filtresi"))
        self.laplace.setText(_translate("Filtreler", "Laplace Filtresi"))
        self.scharr.setText(_translate("Filtreler", "Shcarr Filtresi"))
        self.sobel.setText(_translate("Filtreler", "Sobel Filtresi"))
        self.robert.setText(_translate("Filtreler", "Robert Filtresi"))
        self.prewitt.setText(_translate("Filtreler", "Prewitt Filtresi"))
        self.farid.setText(_translate("Filtreler", "Farid Filtresi"))
        self.hessian.setText(_translate("Filtreler", "Hessian Filtresi"))
        self.kaydet.setText(_translate("Filtreler", "KAYDET"))
    #This code block converts qpixmap object to ndarray.
    #This ndarray will require to perform gaussian filter.
    def pixmap_to_ndarray(self):
        channels_count = 4
        size = self.gosterilecek_resim.size()
        h = size.height()
        w = size.width()
        image = self.gosterilecek_resim.toImage()
        s = image.bits().asstring(w * h * channels_count)
        self.img_ndarray3d = np.fromstring(s, dtype=np.uint8).reshape((h, w, channels_count))

    #This function applies gaussian filter to the image.
    def gaussian_filtresi(self):
        
        self.last_filter = gaussian(image=self.img_ndarray3d,multichannel=True)
        
        #After has processed the image with gaussian filter, we use the opencv lib to display 
            #processed image
        cv.imshow('Image processed with gaussian filter', self.last_filter)
        cv.waitKey(0)
        cv.destroyAllWindows()
        
    #This function applies median filter to the image.
    def median_filter(self):
        
        #We are giving 2D array  and disk property to median function.
        self.last_filter = median(self.img_ndarray3d[:, :, 0], disk(5))

        #We are displaying the filtered image with opencv lib.
        cv.imshow('Image processed with median filter', self.last_filter)
        cv.waitKey(0)
        cv.destroyAllWindows()
    
    #This function applies prewitt filter to the image.
    def prewitt_filter(self):

        #We are giving 2D array function.
        self.last_filter = prewitt(self.img_ndarray3d[:, :, 0])
        cv.imshow('Image processed with prewitt filter', self.last_filter)
        cv.waitKey(0)
        cv.destroyAllWindows()

    #Bu fonksiyon sato filtresini istenen resme uygular.
    def sato_filter(self):

        #sato fonksiyonuna resmin 2 boyutlu ndarray'i gönderir.
        self.last_filter = sato(self.img_ndarray3d[:, :, 0])

        #Bu fonksiyon resmi opencv ile gösterir.
        cv.imshow('Image processed with sato filter', self.last_filter)
        cv.waitKey(0)
        cv.destroyAllWindows()
    
    #Bu fonksiyon farid filtresini istenen resme uygular.
    def farid_filter(self):
        
        #farid fonksiyonuna resmin 2D ndarray halini gönderir.
        self.last_filter = farid(self.img_ndarray3d[:, :, 0])

        #filtrenin uygulandıgı resmi gösterir.
        cv.imshow('Image processed with farid filter', self.last_filter)
        cv.waitKey(0)
        cv.destroyAllWindows()
    
    #Bu fonksiyon hessian filtresini istenen resme uygular.
    def hessian_filter(self):
        #hessian fonksiyonuna resmin 2D ndarray halini gönderir.
        self.last_filter = hessian(self.img_ndarray3d[:, :, 0])
        #filtrenin uygulandıgı resmi gösterir.
        cv.imshow('Image processed with hessian filter', self.last_filter)
        cv.waitKey(0)
        cv.destroyAllWindows()

    #Bu fonksiyonla scharr filtresi uygulanır.
    def scharr_filter(self):
            
        #scharr fonksiyonuna 2 boyutlu dizi gönderilir.
        self.last_filter = scharr(self.img_ndarray3d[:, :, 0])

        #filtrelenen resim opencv kütüphanesi ile ekranda gösterilir.
        cv.imshow('Image processed with scharr filter', self.last_filter)
        cv.waitKey(0)
        cv.destroyAllWindows()

    #Bu fonksiyonla sobel filtresi uygulanır.
    def sobel_filter(self):
        
        #sobel fonksiyonuna 2 boyutlu dizi gönderilir.
        self.last_filter = sobel(self.img_ndarray3d[:, :, 0])

        #filtrelenen resim opencv kütüphanesi ile ekranda gösterilir.
        cv.imshow('Image processed with sobel filter', self.last_filter)
        cv.waitKey(0)
        cv.destroyAllWindows()
    
    # Bu fonksiyon laplace filtresini kullanıcının seçtiği resme uygular.
    def laplace_filter(self):
                
        #laplace fonksiyonuna kullanıcının seçtiği resmin 2 boyutlu ndarray halini gönderiyoruz.
        self.last_filter = laplace(self.img_ndarray3d[:, :, 0])

        #filtrelenen resim opencv kütüphanesi ile ekranda gösterilir.
        cv.imshow('Image processed with laplace filter', self.last_filter)
        cv.waitKey(0)
        cv.destroyAllWindows()
    
    #Bu fonksiyonla robert filtresi uygulanır.
    def robert_filter(self):
        
        #robert fonksiyonuna kullanıcının seçtiği resmin 2 boyutlu ndarray halini gönderiyoruz.
        self.last_filter = roberts(self.img_ndarray3d[:, :, 0])
        #filtrelenen resim opencv kütüphanesi ile ekranda gösterilir.
        cv.imshow('Image processed with robert filter', self.last_filter)
        cv.waitKey(0)
        cv.destroyAllWindows()

    #üzerinde filtre uygulanmış resim dosyasını kaydeden fonksiyon.
    def kaydet_butonu(self):
        file_tuple = QFileDialog.getSaveFileName()
        name = str(file_tuple[0]).replace("/","\\") 
        
        #filtreleme işleminden sonra float dizisini tekrar int dizine çeviriyoruz.
        img = cv.convertScaleAbs(self.last_filter, alpha=(255.0)) 
        cv.imwrite(name, img)
